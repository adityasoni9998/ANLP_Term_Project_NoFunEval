{
	"non_functional_requirement": "memory",
	"commit": "https:\/\/github.com\/erikusaj\/fdroidTvClient\/commit\/f7bbf0e282f10f649cb087be85269b5f7acce6ea",
	"commit_message": "'\\\\\"Use `getApplicationContext()` instead of `getContext()` to prevent memory leaks.\\\\n\\\\nUsing whatever `Activity` as the `Context` used to construct the first content\\\\nprovider means that it will be help onto in memory until the application is GC\\'ed.\\\\n\\\\\"'",
	"source_code": "package org.fdroid.fdroid.data;\n\nimport android.annotation.TargetApi;\nimport android.content.ContentProvider;\nimport android.content.ContentProviderOperation;\nimport android.content.ContentProviderResult;\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.OperationApplicationException;\nimport android.content.UriMatcher;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.support.annotation.NonNull;\n\nimport org.fdroid.fdroid.Utils;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\npublic abstract class FDroidProvider extends ContentProvider {\n\n    private static final String TAG = \"FDroidProvider\";\n\n    public static final String AUTHORITY = \"org.fdroid.fdroid.data\";\n\n    protected static final int CODE_LIST   = 1;\n    protected static final int CODE_SINGLE = 2;\n\n    private static DBHelper dbHelper;\n\n    private boolean isApplyingBatch;\n\n    protected abstract String getTableName();\n\n    protected abstract String getProviderName();\n\n    \/**\n     * Should always be the same as the provider:name in the AndroidManifest\n     *\/\n    public final String getName() {\n        return AUTHORITY + \".\" + getProviderName();\n    }\n\n    \/**\n     * Tells us if we are in the middle of a batch of operations. Allows us to\n     * decide not to notify the content resolver of changes,\n     * every single time we do something during many operations.\n     * Based on http:\/\/stackoverflow.com\/a\/15886915.\n     *\/\n    protected final boolean isApplyingBatch() {\n        return this.isApplyingBatch;\n    }\n\n    @NonNull\n    @Override\n    public ContentProviderResult[] applyBatch(@NonNull ArrayList<ContentProviderOperation> operations)\n        throws OperationApplicationException {\n        ContentProviderResult[] result = null;\n        isApplyingBatch = true;\n        final SQLiteDatabase db = db();\n        db.beginTransaction();\n        try {\n            result = super.applyBatch(operations);\n            db.setTransactionSuccessful();\n        } finally {\n            db.endTransaction();\n            isApplyingBatch = false;\n        }\n        return result;\n    }\n\n    private static synchronized DBHelper getOrCreateDb(Context context) {\n        if (dbHelper == null) {\n            Utils.debugLog(TAG, \"First time accessing database, creating new helper\");\n            dbHelper = new DBHelper(context);\n        }\n        return dbHelper;\n    }\n\n    @Override\n    public boolean onCreate() {\n        return true;\n    }\n\n    protected final synchronized SQLiteDatabase db() {\n        return getOrCreateDb(getContext()).getWritableDatabase();\n    }\n\n    @Override\n    public String getType(@NonNull Uri uri) {\n        String type;\n        switch (getMatcher().match(uri)) {\n            case CODE_LIST:\n                type = \"dir\";\n                break;\n            case CODE_SINGLE:\n            default:\n                type = \"item\";\n                break;\n        }\n        return \"vnd.android.cursor.\" + type + \"\/vnd.\" + AUTHORITY + \".\" + getProviderName();\n    }\n\n    protected abstract UriMatcher getMatcher();\n\n    protected static String generateQuestionMarksForInClause(int num) {\n        StringBuilder sb = new StringBuilder(num * 2);\n        for (int i = 0; i < num; i++) {\n            if (i != 0) {\n                sb.append(',');\n            }\n            sb.append('?');\n        }\n        return sb.toString();\n    }\n\n    @TargetApi(11)\n    protected Set<String> getKeySet(ContentValues values) {\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n            return values.keySet();\n        }\n\n        Set<String> keySet = new HashSet<>();\n        for (Map.Entry<String, Object> item : values.valueSet()) {\n            String key = item.getKey();\n            keySet.add(key);\n        }\n        return keySet;\n\n    }\n\n    protected void validateFields(String[] validFields, ContentValues values)\n        throws IllegalArgumentException {\n        for (final String key : getKeySet(values)) {\n            boolean isValid = false;\n            for (final String validKey : validFields) {\n                if (validKey.equals(key)) {\n                    isValid = true;\n                    break;\n                }\n            }\n\n            if (!isValid) {\n                throw new IllegalArgumentException(\n                    \"Cannot save field '\" + key + \"' to provider \" + getProviderName());\n            }\n        }\n    }\n}\n",
	"target_code": "package org.fdroid.fdroid.data;\n\nimport android.annotation.TargetApi;\nimport android.content.ContentProvider;\nimport android.content.ContentProviderOperation;\nimport android.content.ContentProviderResult;\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.OperationApplicationException;\nimport android.content.UriMatcher;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.support.annotation.NonNull;\n\nimport org.fdroid.fdroid.Utils;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\npublic abstract class FDroidProvider extends ContentProvider {\n\n    private static final String TAG = \"FDroidProvider\";\n\n    public static final String AUTHORITY = \"org.fdroid.fdroid.data\";\n\n    protected static final int CODE_LIST   = 1;\n    protected static final int CODE_SINGLE = 2;\n\n    private static DBHelper dbHelper;\n\n    private boolean isApplyingBatch;\n\n    protected abstract String getTableName();\n\n    protected abstract String getProviderName();\n\n    \/**\n     * Should always be the same as the provider:name in the AndroidManifest\n     *\/\n    public final String getName() {\n        return AUTHORITY + \".\" + getProviderName();\n    }\n\n    \/**\n     * Tells us if we are in the middle of a batch of operations. Allows us to\n     * decide not to notify the content resolver of changes,\n     * every single time we do something during many operations.\n     * Based on http:\/\/stackoverflow.com\/a\/15886915.\n     *\/\n    protected final boolean isApplyingBatch() {\n        return this.isApplyingBatch;\n    }\n\n    @NonNull\n    @Override\n    public ContentProviderResult[] applyBatch(@NonNull ArrayList<ContentProviderOperation> operations)\n        throws OperationApplicationException {\n        ContentProviderResult[] result = null;\n        isApplyingBatch = true;\n        final SQLiteDatabase db = db();\n        db.beginTransaction();\n        try {\n            result = super.applyBatch(operations);\n            db.setTransactionSuccessful();\n        } finally {\n            db.endTransaction();\n            isApplyingBatch = false;\n        }\n        return result;\n    }\n\n    private static synchronized DBHelper getOrCreateDb(Context context) {\n        if (dbHelper == null) {\n            Utils.debugLog(TAG, \"First time accessing database, creating new helper\");\n            dbHelper = new DBHelper(context);\n        }\n        return dbHelper;\n    }\n\n    @Override\n    public boolean onCreate() {\n        return true;\n    }\n\n    protected final synchronized SQLiteDatabase db() {\n        return getOrCreateDb(getContext().getApplicationContext()).getWritableDatabase();\n    }\n\n    @Override\n    public String getType(@NonNull Uri uri) {\n        String type;\n        switch (getMatcher().match(uri)) {\n            case CODE_LIST:\n                type = \"dir\";\n                break;\n            case CODE_SINGLE:\n            default:\n                type = \"item\";\n                break;\n        }\n        return \"vnd.android.cursor.\" + type + \"\/vnd.\" + AUTHORITY + \".\" + getProviderName();\n    }\n\n    protected abstract UriMatcher getMatcher();\n\n    protected static String generateQuestionMarksForInClause(int num) {\n        StringBuilder sb = new StringBuilder(num * 2);\n        for (int i = 0; i < num; i++) {\n            if (i != 0) {\n                sb.append(',');\n            }\n            sb.append('?');\n        }\n        return sb.toString();\n    }\n\n    @TargetApi(11)\n    protected Set<String> getKeySet(ContentValues values) {\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n            return values.keySet();\n        }\n\n        Set<String> keySet = new HashSet<>();\n        for (Map.Entry<String, Object> item : values.valueSet()) {\n            String key = item.getKey();\n            keySet.add(key);\n        }\n        return keySet;\n\n    }\n\n    protected void validateFields(String[] validFields, ContentValues values)\n        throws IllegalArgumentException {\n        for (final String key : getKeySet(values)) {\n            boolean isValid = false;\n            for (final String validKey : validFields) {\n                if (validKey.equals(key)) {\n                    isValid = true;\n                    break;\n                }\n            }\n\n            if (!isValid) {\n                throw new IllegalArgumentException(\n                    \"Cannot save field '\" + key + \"' to provider \" + getProviderName());\n            }\n        }\n    }\n}\n",
	"pl": "Java",
	"classification_left_label": "A",
	"classification_right_label": "B",
	"left_output": "A",
	"right_output": "A"
}