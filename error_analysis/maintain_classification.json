{
	"query": "Unused import",
	"codeql_check": "codeql-home\/codeql-repo\/python\/ql\/src\/Imports\/UnusedImport.ql",
	"file_path": "rcbops\/glance-buildpackage\/glance\/tests\/unit\/test_db.py",
	"pl": "python",
	"source_code": "# vim: tabstop=4 shiftwidth=4 softtabstop=4\n\n# Copyright 2010-2011 OpenStack, LLC\n# All Rights Reserved.\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n#    License for the specific language governing permissions and limitations\n#    under the License.\n\nimport datetime\n\nfrom glance.common import context\nfrom glance.common import exception\nfrom glance.common import utils\nfrom glance.registry import context as rcontext\nfrom glance.registry.db import api as db_api\nfrom glance.registry.db import models as db_models\nfrom glance.tests.unit import base\nfrom glance.tests import utils as test_utils\n\n\n_gen_uuid = utils.generate_uuid\n\nUUID1 = _gen_uuid()\nUUID2 = _gen_uuid()\n\n\nCONF = {'sql_connection': 'sqlite:\/\/',\n        'verbose': False,\n        'debug': False}\n\nFIXTURES = [\n    {'id': UUID1,\n     'name': 'fake image #1',\n     'status': 'active',\n     'disk_format': 'ami',\n     'container_format': 'ami',\n     'is_public': False,\n     'created_at': datetime.datetime.utcnow(),\n     'updated_at': datetime.datetime.utcnow(),\n     'deleted_at': None,\n     'deleted': False,\n     'checksum': None,\n     'min_disk': 0,\n     'min_ram': 0,\n     'size': 13,\n     'location': \"swift:\/\/user:passwd@acct\/container\/obj.tar.0\",\n     'properties': {'type': 'kernel'}},\n    {'id': UUID2,\n     'name': 'fake image #2',\n     'status': 'active',\n     'disk_format': 'vhd',\n     'container_format': 'ovf',\n     'is_public': True,\n     'created_at': datetime.datetime.utcnow(),\n     'updated_at': datetime.datetime.utcnow(),\n     'deleted_at': None,\n     'deleted': False,\n     'checksum': None,\n     'min_disk': 5,\n     'min_ram': 256,\n     'size': 19,\n     'location': \"file:\/\/\/tmp\/glance-tests\/2\",\n     'properties': {}}]\n\n\nclass TestRegistryDb(base.IsolatedUnitTest):\n\n    def setUp(self):\n        \"\"\"Establish a clean test environment\"\"\"\n        super(TestRegistryDb, self).setUp()\n        conf = test_utils.TestConfigOpts(CONF)\n        self.adm_context = rcontext.RequestContext(is_admin=True)\n        self.context = rcontext.RequestContext(is_admin=False)\n        db_api.configure_db(conf)\n        self.destroy_fixtures()\n        self.create_fixtures()\n\n    def create_fixtures(self):\n        for fixture in FIXTURES:\n            db_api.image_create(self.adm_context, fixture)\n\n    def destroy_fixtures(self):\n        # Easiest to just drop the models and re-create them...\n        db_models.unregister_models(db_api._ENGINE)\n        db_models.register_models(db_api._ENGINE)\n\n    def test_image_get(self):\n        image = db_api.image_get(self.context, UUID1)\n        self.assertEquals(image['id'], FIXTURES[0]['id'])\n\n    def test_image_get_disallow_deleted(self):\n        db_api.image_destroy(self.adm_context, UUID1)\n        self.assertRaises(exception.NotFound, db_api.image_get,\n                          self.context, UUID1)\n\n    def test_image_get_allow_deleted(self):\n        db_api.image_destroy(self.adm_context, UUID1)\n        image = db_api.image_get(self.adm_context, UUID1)\n        self.assertEquals(image['id'], FIXTURES[0]['id'])\n\n    def test_image_get_force_allow_deleted(self):\n        db_api.image_destroy(self.adm_context, UUID1)\n        image = db_api.image_get(self.context, UUID1, force_show_deleted=True)\n        self.assertEquals(image['id'], FIXTURES[0]['id'])\n\n    def test_image_get_all(self):\n        images = db_api.image_get_all(self.context)\n        self.assertEquals(len(images), 2)\n\n    def test_image_get_all_marker(self):\n        images = db_api.image_get_all(self.context, marker=UUID2)\n        self.assertEquals(len(images), 1)\n\n    def test_image_get_all_marker_deleted(self):\n        \"\"\"Cannot specify a deleted image as a marker.\"\"\"\n        db_api.image_destroy(self.adm_context, UUID1)\n        filters = {'deleted': False}\n        self.assertRaises(exception.NotFound, db_api.image_get_all,\n                          self.context, marker=UUID1, filters=filters)\n\n    def test_image_get_all_marker_deleted_showing_deleted_as_admin(self):\n        \"\"\"Specify a deleted image as a marker if showing deleted images.\"\"\"\n        db_api.image_destroy(self.adm_context, UUID1)\n        images = db_api.image_get_all(self.adm_context, marker=UUID1)\n        self.assertEquals(len(images), 0)\n\n    def test_image_get_all_marker_deleted_showing_deleted(self):\n        \"\"\"Specify a deleted image as a marker if showing deleted images.\"\"\"\n        db_api.image_destroy(self.adm_context, UUID1)\n        filters = {'deleted': True}\n        images = db_api.image_get_all(self.context, marker=UUID1,\n                                      filters=filters)\n        self.assertEquals(len(images), 0)\n",
	"target_code": "# vim: tabstop=4 shiftwidth=4 softtabstop=4\n\n# Copyright 2010-2011 OpenStack, LLC\n# All Rights Reserved.\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n#    License for the specific language governing permissions and limitations\n#    under the License.\n\nimport datetime\n\nfrom glance.common import exception\nfrom glance.common import utils\nfrom glance.registry import context as rcontext\nfrom glance.registry.db import api as db_api\nfrom glance.registry.db import models as db_models\nfrom glance.tests.unit import base\nfrom glance.tests import utils as test_utils\n\n\n_gen_uuid = utils.generate_uuid\n\nUUID1 = _gen_uuid()\nUUID2 = _gen_uuid()\n\n\nCONF = {'sql_connection': 'sqlite:\/\/',\n        'verbose': False,\n        'debug': False}\n\nFIXTURES = [\n    {'id': UUID1,\n     'name': 'fake image #1',\n     'status': 'active',\n     'disk_format': 'ami',\n     'container_format': 'ami',\n     'is_public': False,\n     'created_at': datetime.datetime.utcnow(),\n     'updated_at': datetime.datetime.utcnow(),\n     'deleted_at': None,\n     'deleted': False,\n     'checksum': None,\n     'min_disk': 0,\n     'min_ram': 0,\n     'size': 13,\n     'location': \"swift:\/\/user:passwd@acct\/container\/obj.tar.0\",\n     'properties': {'type': 'kernel'}},\n    {'id': UUID2,\n     'name': 'fake image #2',\n     'status': 'active',\n     'disk_format': 'vhd',\n     'container_format': 'ovf',\n     'is_public': True,\n     'created_at': datetime.datetime.utcnow(),\n     'updated_at': datetime.datetime.utcnow(),\n     'deleted_at': None,\n     'deleted': False,\n     'checksum': None,\n     'min_disk': 5,\n     'min_ram': 256,\n     'size': 19,\n     'location': \"file:\/\/\/tmp\/glance-tests\/2\",\n     'properties': {}}]\n\n\nclass TestRegistryDb(base.IsolatedUnitTest):\n\n    def setUp(self):\n        \"\"\"Establish a clean test environment\"\"\"\n        super(TestRegistryDb, self).setUp()\n        conf = test_utils.TestConfigOpts(CONF)\n        self.adm_context = rcontext.RequestContext(is_admin=True)\n        self.context = rcontext.RequestContext(is_admin=False)\n        db_api.configure_db(conf)\n        self.destroy_fixtures()\n        self.create_fixtures()\n\n    def create_fixtures(self):\n        for fixture in FIXTURES:\n            db_api.image_create(self.adm_context, fixture)\n\n    def destroy_fixtures(self):\n        # Easiest to just drop the models and re-create them...\n        db_models.unregister_models(db_api._ENGINE)\n        db_models.register_models(db_api._ENGINE)\n\n    def test_image_get(self):\n        image = db_api.image_get(self.context, UUID1)\n        self.assertEquals(image['id'], FIXTURES[0]['id'])\n\n    def test_image_get_disallow_deleted(self):\n        db_api.image_destroy(self.adm_context, UUID1)\n        self.assertRaises(exception.NotFound, db_api.image_get,\n                          self.context, UUID1)\n\n    def test_image_get_allow_deleted(self):\n        db_api.image_destroy(self.adm_context, UUID1)\n        image = db_api.image_get(self.adm_context, UUID1)\n        self.assertEquals(image['id'], FIXTURES[0]['id'])\n\n    def test_image_get_force_allow_deleted(self):\n        db_api.image_destroy(self.adm_context, UUID1)\n        image = db_api.image_get(self.context, UUID1, force_show_deleted=True)\n        self.assertEquals(image['id'], FIXTURES[0]['id'])\n\n    def test_image_get_all(self):\n        images = db_api.image_get_all(self.context)\n        self.assertEquals(len(images), 2)\n\n    def test_image_get_all_marker(self):\n        images = db_api.image_get_all(self.context, marker=UUID2)\n        self.assertEquals(len(images), 1)\n\n    def test_image_get_all_marker_deleted(self):\n        \"\"\"Cannot specify a deleted image as a marker.\"\"\"\n        db_api.image_destroy(self.adm_context, UUID1)\n        filters = {'deleted': False}\n        self.assertRaises(exception.NotFound, db_api.image_get_all,\n                          self.context, marker=UUID1, filters=filters)\n\n    def test_image_get_all_marker_deleted_showing_deleted_as_admin(self):\n        \"\"\"Specify a deleted image as a marker if showing deleted images.\"\"\"\n        db_api.image_destroy(self.adm_context, UUID1)\n        images = db_api.image_get_all(self.adm_context, marker=UUID1)\n        self.assertEquals(len(images), 0)\n\n    def test_image_get_all_marker_deleted_showing_deleted(self):\n        \"\"\"Specify a deleted image as a marker if showing deleted images.\"\"\"\n        db_api.image_destroy(self.adm_context, UUID1)\n        filters = {'deleted': True}\n        images = db_api.image_get_all(self.context, marker=UUID1,\n                                      filters=filters)\n        self.assertEquals(len(images), 0)\n",
	"classification_left_label": "B",
	"classification_right_label": "A",
	"left_output": "A",
	"right_output": "A"
}